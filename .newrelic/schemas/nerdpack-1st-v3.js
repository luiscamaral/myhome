module.exports=function(e){var t={};function i(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,i),n.l=!0,n.exports}return i.m=e,i.c=t,i.d=function(e,t,r){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)i.d(r,n,function(t){return e[t]}.bind(null,n));return r},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=38)}([function(e){e.exports={$id:"action-categories",$schema:"http://json-schema.org/draft-07/schema#",title:"Action Categories",description:"Available action categories.",type:"string",enum:["advanced","beta","monitor","other","related-items","reports","troubleshoot","nr-only"]}},function(e){e.exports={$id:"artifact-id",$schema:"http://json-schema.org/draft-07/schema#",title:"Artifact id",type:"string",pattern:"^[a-z][a-z0-9-]+$",description:"The unique identifier for an artifact without the package id. It has to be unique. It must be lowercase, start with a letter, and only contain alphabetic characters, numbers and hyphens ^[a-z][a-z0-9-]+$. This should not contain the package id.",errorMessage:"The id must be lowercase, start with a letter and can only contain alphabetic characters, numbers and hyphens. E.g: my-nerdlet-id. Should match the regular expression: ^[a-z0-9-]+$"}},function(e){e.exports={$id:"full-artifact-id",$schema:"http://json-schema.org/draft-07/schema#",title:"Artifact id",type:"string",pattern:"^([a-z0-9]+[a-z0-9-]*)\\.([a-z0-9]+[a-z0-9-]*)$",description:"The full unique identifier (package id included) for an artifact. It must be lowercase, and only contain alphabetic characters, numbers, hyphens and a dot between the package id and the artifact id (^([a-z0-9]+[a-z0-9-]*)\\.([a-z0-9]+[a-z0-9-]*)$).",errorMessage:"The id must be lowercase, and can only contain alphabetic characters, numbers, hyphens and a dot between the package id and the artifact id. For example: 'example-package.my-nerdlet-id'. It should match the regular expression: ^([a-z0-9]+[a-z0-9-]*)\\.([a-z0-9]+[a-z0-9-]*)$"}},function(e){e.exports={$id:"context-id-matcher",$schema:"http://json-schema.org/draft-07/schema#",title:"Context id matcher",type:"string",pattern:"^!?([a-z0-9]+[a-z0-9-]*)\\.([a-z0-9]+[a-z0-9-]*)$",description:"The full unique identifier (package id included) for an artifact. This is used as a filter in the context. The id can be negated using the ! symbol.",errorMessage:"The id must be lowercase, and can only contain alphabetic characters, numbers, hyphens and a dot between the package id and the artifact id. For example: 'example-package.my-nerdlet-id'. It is possible to negate the value using the '!' symbol. E.g: '!example-package.my-nerdlet-id'. It should match the regular expression: ^!?([a-z0-9]+[a-z0-9-]*)\\.([a-z0-9]+[a-z0-9-]*)$"}},function(e){e.exports={$id:"entity-guid-domain",$schema:"http://json-schema.org/draft-07/schema#",title:"Entity GUID domain",type:"string",pattern:"^[A-Z0-9_]+$",description:"The entity GUID domain. It can only contain uppercase alphabetic characters, numbers and underscores (^[A-Z0-9_]+$).",errorMessage:"The entity domain should contain only uppercase alphabetic characters, numbers or underscores. Should match the regular expression: ^[A-Z0-9_]+$"}},function(e){e.exports={$id:"entity-guid-domain-matcher",$schema:"http://json-schema.org/draft-07/schema#",title:"Entity GUID domain",type:"string",pattern:"^!?[A-Z0-9_]+$",description:"The entity GUID domain. It can only contain uppercase alphabetic characters, numbers and underscores (^!?[A-Z0-9_]+$). It is possible to negate the value using the '!' symbol. For example: '!APM'.",errorMessage:"The entity domain should contain only uppercase alphabetic characters, numbers or underscores. It is possible to negate the value using the '!' symbol. For example: '!APM'. Should match the regular expression: ^!?[A-Z0-9_]+$"}},function(e){e.exports={$id:"entity-guid-type",$schema:"http://json-schema.org/draft-07/schema#",title:"Entity GUID type",type:"string",pattern:"^[A-Z0-9_]+$",description:"The entity GUID type. It can only contain uppercase alphabetic characters, numbers and underscores (^[A-Z0-9_]+$).",errorMessage:"The entity type should contain only uppercase alphabetic characters, numbers or underscores. Should match the regular expression: ^[A-Z0-9_]+$"}},function(e){e.exports={$id:"entity-guid-type-matcher",$schema:"http://json-schema.org/draft-07/schema#",title:"Entity GUID type",type:"string",pattern:"^!?[A-Z0-9_]+$",description:"The entity GUID type. It can only contain uppercase alphabetic characters, numbers and underscores (^!?[A-Z0-9_]+$). It is possible to negate the value using the '!' symbol. For example: '!APPLICATION'.",errorMessage:"The entity type should contain only uppercase alphabetic characters, numbers or underscores. It is possible to negate the value using the '!' symbol. For example: '!APPLICATION'. Should match the regular expression: ^!?[A-Z0-9_]+$"}},function(e){e.exports={$id:"deprecated-ids",$schema:"http://json-schema.org/draft-07/schema#",title:"Deprecated IDs",description:"List of IDs that will be mapped to the artifact ID, to provide backwards compatibility. These are full artifact IDs, i. e. with the format <nerdpack_id>.<artifact_id>.",errorMessage:"Deprecated IDs should be an array containing full artifact IDs",type:"array",items:{$ref:"full-artifact-id"}}},function(e){e.exports={$id:"nerdlet-template",$schema:"http://json-schema.org/draft-07/schema#",title:"Nerdlet template configuration",description:"Valid configuration for nerdlet templates.",type:"object",properties:{type:{description:"The type of template used by the nerdlet. As of now, only 'mosaic' is supported.",type:"string",enum:["mosaic"],errorMessage:"'mosaic' is the only supported template type"},id:{description:"The identifier of the template to consume when fetching from a service.",type:"number",errorMessage:"Template identifiers are numeric"}},required:["type"],additionalProperties:!1}},function(e){e.exports={$id:"schema-types",$schema:"http://json-schema.org/draft-07/schema#",title:"Schema Types",description:"Available schema types.",type:"string",enum:["ENTITY_TYPE","HOOK","LAUNCHER","NERDLET","FOCUS_PANEL","NERDPACK","OVERLAY","VISUALIZATION","SHARED_COMPONENT_PACKAGE","SHARED_COMPONENT"]}},function(e){e.exports={$id:"vizco-filters",$schema:"http://json-schema.org/draft-07/schema#",title:"Vizco filters",description:"Available vizco filters used in the context to extend vizco extension point.",type:"string",enum:["nrql-only","mts-only","nr-only"]}},function(e){e.exports={$id:"artifact-schema",$schema:"http://json-schema.org/draft-07/schema#",title:"Artifact schema",description:"Common attributes shared between all the schemas.",type:"object",properties:{id:{$ref:"artifact-id"},deprecatedIds:{$ref:"deprecated-ids"},schemaType:{description:"Informs what kind of artifact are we defining.",$ref:"schema-types"},displayName:{description:"The name of the artifact implementation in a human-readable format.",type:"string"},description:{type:"string",description:"The description of the artifact. This could could be also used for documentation or search purposes.",errorMessage:"This is required."},schema:{description:"[DEPRECATED] Informs what kind of artifact are we defining.",type:"string"},schemaVersion:{description:"[DEPRECATED] The schema version this artifact fulfills.",type:"number"}},required:["description","displayName","id","schemaType"]}},function(e){e.exports={$id:"hook-schema",$schema:"http://json-schema.org/draft-07/schema#",description:"Hook Schema version 1",type:"object",properties:{id:{description:"Inherited from common artifact schema",type:"string"},deprecatedIds:{description:"Inherited from common artifact schema",type:"array"},schemaType:{description:"Inherited from common artifact schema",type:"string"},displayName:{description:"Inherited from common artifact schema",type:"string"},description:{description:"Inherited from common artifact schema",type:"string"},extends:{description:"The list of extension points IDs that this hook extends. Ids must be lowercase, and can only contain alphabetic characters, numbers and hyphens (^[a-z0-9]+[a-z0-9-]*$).",type:"array",items:{type:"string",pattern:"^[a-z0-9]+[a-z0-9-]*$"},errorMessage:"The ids must be lowercase, and can only contain alphabetic characters, numbers and hyphens. For example: 'my-extension-point-id'. It should match the regular expression: ^[a-z0-9]+[a-z0-9-]*$"},icon:{description:"The icon to be used for this hook if it has a UI representation. It has to be the name of any of the icons in NR-UI.",type:"string"},context:{type:"object",properties:{entityTypes:{description:"Only entity types in the following list are able to use this entity type.",type:"array",items:{oneOf:[{$ref:"entity-guid-type-matcher"},{type:"object",properties:{domain:{$ref:"entity-guid-domain-matcher"},type:{$ref:"entity-guid-type-matcher"}},additionalProperties:!1}]}},nerdlets:{description:"Only nerdlets in the following list are able to use this entity type.",type:"array",items:{$ref:"context-id-matcher"}},launchers:{description:"Only launchers in the following list are able to use this entity type.",type:"array",items:{$ref:"context-id-matcher"}},vizco:{description:"Only extension points passing the following list of filters are able to retrieve this hook.",type:"array",items:{$ref:"vizco-filters"}}}},schema:{description:"[DEPRECATED] Inherited from common artifact schema",type:"string"},schemaVersion:{description:"[DEPRECATED] Inherited from common artifact schema",type:"number"},component:{description:"[DEPRECATED] The JavaScript function the contains the logic of the hook.",type:"object"}},additionalProperties:!1,required:["icon","extends"]}},function(e){e.exports={$id:"entity-categories",$schema:"http://json-schema.org/draft-07/schema#",title:"Entity Categories",description:"Available entity categories.",type:"string",enum:["Interests","Your system","AWS","Azure","GCP","On host integrations","Network","Kubernetes","Synthetics","Machine learning"]}},function(e){e.exports={$id:"entities-matcher",$schema:"http://json-schema.org/draft-07/schema#",title:"Entities Matcher",description:"Entities structure.",type:"array",items:{type:"object",properties:{domain:{type:"string"},type:{type:"string"},tags:{type:"array",items:{type:"object",properties:{key:{type:"string"},values:{type:"array",items:{type:"string"}}},additionalProperties:!1,additionalItems:!0},description:"Tags is an array of objects, that matches following structure { key: 'foo', values: ['bar', 'baz'] }",errorMessage:"Tags can only contain this structure ie: { key: <string>, values: Array<string> }"}}}}},function(e){e.exports={$id:"nerdlet-view-types",$schema:"http://json-schema.org/draft-07/schema#",title:"Nerdlet view types",description:"Available nerdlet view types",type:"string",default:"seldon",enum:["seldon","native"]}},function(e){e.exports={$id:"root-nerdlet-id",$schema:"http://json-schema.org/draft-07/schema#",title:"Root nerdlet id",type:"string",pattern:"^([a-z0-9]+[a-z0-9-]*\\.)?[a-z0-9]+[a-z0-9-]*$",description:"Root nerdlet id references the main nerdlet to load when a launcher is clicked. It can be formed by an `artifact-id` or a `full-artifact-id`.",errorMessage:"Root nerdlet id must be a full nerdlet id (matching ^[a-z0-9]+[a-z0-9-]*\\.[a-z0-9]+[a-z0-9-]*$) or a nerdlet id (matching ^[a-z0-9]+[a-z0-9-]*$)."}},function(e){e.exports={$id:"entity-type-schema",$schema:"http://json-schema.org/draft-07/schema#",description:"Entity Type Schema version 2",type:"object",properties:{id:{description:"Inherited from common artifact schema",type:"string"},deprecatedIds:{description:"Inherited from common artifact schema",type:"array"},schemaType:{description:"Inherited from common artifact schema",type:"string"},displayName:{description:"Inherited from common artifact schema",type:"string"},description:{description:"Inherited from common artifact schema",type:"string"},entityGuid:{type:"object",properties:{domain:{description:"The domain of the Entity GUID is the authoritative source for the identity of the entity. The domain could be a product, such as MOBILE, a more specific scope, such as EXTERNAL, or a third party source, such as AWS. Practically speaking, the domain is used by cross-product services to identify APIs which can supply data for the entity.",$ref:"entity-guid-domain"},type:{description:"The type of the entity must be unique within its domain, but may be duplicated between domains. The type should be human-friendly, suitable for customer API consumption, since it will be exposed in the customer facing Relationship API.",$ref:"entity-guid-type"}},required:["domain","type"]},icon:{description:"The icon to be used for this Entity Type. It has to be the name of any of the icons in NR-UI",type:"string"},category:{description:"The category of the entity type. This is used in the New Relic One platform to group entity types.",$ref:"entity-categories"},isCollection:{description:"Indicates if this entity type is a collection that can contain one or more other entity types i.e. 'FAVORITE' (Watching) or 'ALERT' (Alerting).",type:"boolean"},overviewNerdletId:{description:"The id of the Nerdlet to be rendered as the overview for this type of entity in the Explorer.",$ref:"full-artifact-id"},nerdletSections:{description:"The nerdlet sections to be shown in the entity detail view.",type:"array",items:{type:"object",properties:{name:{description:"Name of the section.",type:"string"},nerdlets:{description:"Nerdlets that belong to the section.",type:"array",items:{$ref:"full-artifact-id"}}},required:["name","nerdlets"],additionalProperties:!1}},context:{type:"object",properties:{entityTypes:{description:"Only entity types in the following list are able to use this entity type.",type:"array",items:{oneOf:[{$ref:"entity-guid-type-matcher"},{type:"object",properties:{domain:{$ref:"entity-guid-domain-matcher"},type:{$ref:"entity-guid-type-matcher"}},additionalProperties:!1}]}},nerdlets:{description:"Only nerdlets in the following list are able to use this entity type.",type:"array",items:{$ref:"context-id-matcher"}},launchers:{description:"Only launchers in the following list are able to use this entity type.",type:"array",items:{$ref:"context-id-matcher"}}}},urlPattern:{description:"[DEPRECATED] The url pattern that used to map entities of this type the legacy application.",type:"string"},domainName:{description:"The Legacy product name this entity type is replacing",type:"string"},schema:{description:"[DEPRECATED] Inherited from common artifact schema",type:"string"},schemaVersion:{description:"[DEPRECATED] Inherited from common artifact schema",type:"number"},class:{description:"[DEPRECATED] The entity type JavaScript class instance that contains logic for a specific entity type.",type:"object"}},additionalProperties:!1,required:["category","entityGuid","icon"]}},function(e){e.exports={$id:"nerdlet-schema",$schema:"http://json-schema.org/draft-07/schema#",description:"Nerdlet Schema version 1",type:"object",properties:{id:{description:"Inherited from common artifact schema",type:"string"},deprecatedIds:{description:"Inherited from common artifact schema",type:"array"},schemaType:{description:"Inherited from common artifact schema",type:"string"},displayName:{description:"Inherited from common artifact schema",type:"string"},description:{description:"Inherited from common artifact schema",type:"string"},entities:{description:"[DEPRECATED] Use context.entities instead. An array of entity types on which this nerdlet operates. It also accepts ['*'], which means it operates on all existing entity types.",type:"array",items:{oneOf:[{$ref:"entity-guid-type-matcher"},{type:"string",const:"*"},{type:"object",properties:{domain:{$ref:"entity-guid-domain-matcher"},type:{$ref:"entity-guid-type-matcher"}},additionalProperties:!1}]}},actionCategory:{description:"The category to which the nerdlet belongs to. If this value is provided, it means the Nerdlet can behave as an action (it can operate on an entity and it will appear listed in the Actions Pane)",$ref:"action-categories"},tessen:{description:"The tessen configuration for this nerdlet.",type:"object",properties:{product:{description:"Three or four letter identifier of the product line (e.g. PLTF for Platform Accounts).",type:"string"},subproduct:{description:"Three or four letter identifier of the sub-product line (e.g. DASH for Custom Dashboards).",type:"string"}}},capability:{description:"The capability that the user needs to have in order to open the nerdlet. They are only verified in the entity explorer for now.",type:"object",properties:{scopeType:{description:"The type of the capability that the user needs to have in order to open the nerdlet.",type:"string",enum:["ACCOUNT","ACTOR","GLOBAL","ORGANIZATION"]},name:{description:"The name of the capability that the user needs to have in order to open the nerdlet.",type:"string"}}},entitlement:{description:"The entitlement that the user needs to have in order to open the nerdlet.",type:"string"},template:{description:"Configuration for template-based nerdlets.",$ref:"nerdlet-template"},schema:{description:"[DEPRECATED] Inherited from common artifact schema",type:"string"},schemaVersion:{description:"[DEPRECATED] Inherited from common artifact schema",type:"number"},component:{description:"[DEPRECATED] The JavaScript class that is a React component for the nerdlet.",type:"object"},defaultState:{description:"[DEPRECATED] The default state that us stored in the URL for the nerdlet.",type:"object"},config:{description:"[DEPRECATED] Configuration that will be used by the platform to extend the functionality of the nerdlet and the Pane it is rendered in.",type:"object"},context:{type:"object",properties:{entities:{description:"An array of entities on which this nerdlet operates. It also accepts [{}], which means it operates on all existing entities.",$ref:"entities-matcher"}}},defaultViewType:{$ref:"nerdlet-view-types",description:"The default view type the nerdlet will display (seldon or native)."}},additionalProperties:!1}},function(e){e.exports={$id:"overlay-schema",$schema:"http://json-schema.org/draft-07/schema#",description:"Overlay Schema version 1",type:"object",properties:{id:{description:"Inherited from common artifact schema",type:"string"},deprecatedIds:{description:"Inherited from common artifact schema",type:"array"},schemaType:{description:"Inherited from common artifact schema",type:"string"},displayName:{description:"Inherited from common artifact schema",type:"string"},description:{description:"Inherited from common artifact schema",type:"string"},icon:{description:"The icon to be used for this Overlay. It has to be the name of any of the new icon set in NR-UI X.",type:"string"},rootNerdletId:{description:"The id of the Nerdlet to be rendered in the nerdlet container when the overlay is initially rendered.",$ref:"full-artifact-id"},entitlement:{description:"The entitlement that the user needs to have in order to open the overlay.",type:"string"},tooltip:{description:"The tooltip text that will appear when hovering over overlay trigger button.",type:"string"}},additionalProperties:!1,required:["icon","rootNerdletId"]}},function(e){e.exports={$id:"nerdpack-id",$schema:"http://json-schema.org/draft-07/schema#",title:"Nerdpack id",type:"string",pattern:"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",description:"The universal unique identifier (UUID) for a Nerdpack. This should be created and managed by the NR1 CLI.",errorMessage:"The ID of your nerdpack is not a valid UUID."}},function(e){e.exports={$id:"visualization-field",$schema:"http://json-schema.org/draft-07/schema#",description:"Visualization Field",type:"object",properties:{name:{description:"Name of the JavaScript key for the object.",type:"string"},title:{description:"Title of the field, as expected to be shown in UI.",type:"string"},description:{description:"Short sentence describing what the field is used for.",type:"string"},type:{description:"Expected type value supported.",type:"string",enum:["boolean","number","string","enum","json","nrql","account-id"]},min:{description:"Minimum number supported.",type:"number"},max:{description:"Maximum number supported.",type:"number"},required:{description:"If enabled, a value MUST be provided for this field",type:"boolean"},step:{description:"Step for numbers (increment or decrement).",type:"number"},items:{description:"List of enum properties.",type:"array",items:{type:"object",properties:{title:{description:"Title of the enumerated property, as expected to be shown in UI.",type:"string"},value:{description:"Value the field will acquire when the enumerated is selected.",type:["number","string","boolean","object","array","null"]}}}}},additionalProperties:!1}},function(e){e.exports={$id:"visualization-collection",$schema:"http://json-schema.org/draft-07/schema#",description:"Visualization Collection",type:"object",properties:{name:{description:"Name of the JavaScript key for the object.",type:"string"},title:{description:"Title of the collection, as expected to be shown in UI.",type:"string"},description:{description:"Short sentence describing what the collection is used for.",type:"string"},type:{type:"string",const:"collection"},items:{description:"List of fields, collections or namespaces.",type:"array",items:{oneOf:[{$ref:"visualization-namespace"},{$ref:"visualization-collection"},{$ref:"visualization-field"}]}}},additionalProperties:!1}},function(e){e.exports={$id:"visualization-namespace",$schema:"http://json-schema.org/draft-07/schema#",description:"Visualization Namespace",type:"object",properties:{name:{description:"Name of the JavaScript key for the object.",type:"string"},title:{description:"Title of the namespace, as expected to be shown in UI.",type:"string"},description:{description:"Short sentence describing what the namespace is used for.",type:"string"},type:{type:"string",const:"namespace"},items:{description:"List of fields, collections or namespaces.",type:"array",items:{oneOf:[{$ref:"visualization-namespace"},{$ref:"visualization-collection"},{$ref:"visualization-field"}]}}},additionalProperties:!1}},function(e){e.exports={$id:"visualization-schema",$schema:"http://json-schema.org/draft-07/schema#",description:"Visualization Schema",type:"object",properties:{id:{description:"Inherited from common artifact schema",type:"string"},deprecatedIds:{description:"Inherited from common artifact schema",type:"array"},schemaType:{description:"Inherited from common artifact schema",type:"string"},displayName:{description:"Inherited from common artifact schema",type:"string"},description:{description:"Inherited from common artifact schema",type:"string"},configuration:{description:"List of fields, collections or namspaces.",type:"array",items:{oneOf:[{$ref:"visualization-namespace"},{$ref:"visualization-collection"},{$ref:"visualization-field"}]}}},additionalProperties:!1}},,,,,,,,,,,,,function(e,t,i){e.exports={definitions:i(39),schemas:i(41)}},function(e,t,i){e.exports=[i(21),i(40),i(22),i(23),i(24),i(16),i(14),i(15),i(0),i(1),i(8),i(2),i(17),i(3),i(4),i(5),i(6),i(7),i(9),i(10),i(11)]},function(e){e.exports={$id:"nerdpack-name",$schema:"http://json-schema.org/draft-07/schema#",title:"Nedpack name",type:"string",pattern:"^[a-z][a-z0-9-]+$",description:"User-friendly name for first party nerdpacks (needs to be Web-secure)",errorMessage:"The nerdpack name must be lowercase, start with a letter and can only contain alphabetic characters, numbers and hyphens (-). E.g: 'dashboards-list'. Should match the regular expression: ^[a-z][a-z0-9-]+$"}},function(e,t,i){const r=i(12),n=i(18),a=i(13),o=i(42),s=i(19),c=i(43),p=i(20),d=i(44),h=i(25),m=i(45),l=i(46);e.exports=[r,n,d,a,o,s,c,p,h,m,l]},function(e){e.exports={$id:"launcher-schema",$schema:"http://json-schema.org/draft-07/schema#",description:"Launcher Schema version 1",type:"object",properties:{id:{description:"Inherited from common artifact schema",type:"string"},deprecatedIds:{description:"Inherited from common artifact schema",type:"array"},schemaType:{description:"Inherited from common artifact schema",type:"string"},displayName:{description:"Inherited from common artifact schema",type:"string"},description:{description:"Inherited from common artifact schema",type:"string"},hidden:{description:"Indicates if the Launcher will be hidden in the UI (Apps Overlay & Apps Dropdown)",type:"boolean"},icon:{description:"The icon to be used for this Launcher. It has to be the name of any of the icons in NR-UI.",type:"string"},rootNerdletId:{description:"The id of the Nerdlet to be rendered in the first pane when the Launcher is initially rendered. You can also override the defaultState and config of the Nerdlet.",$ref:"root-nerdlet-id"},entitlement:{description:"The entitlement that the user needs to have in order to open the launcher.",type:"string"},context:{type:"object",properties:{entityTypes:{description:"Only entity types in the following list are able to be shown in this launcher.",type:"array",items:{oneOf:[{$ref:"entity-guid-type-matcher"},{type:"object",properties:{domain:{$ref:"entity-guid-domain-matcher"},type:{$ref:"entity-guid-type-matcher"}},additionalProperties:!1}]}}}}},additionalProperties:!1,required:["rootNerdletId"]}},function(e){e.exports={$id:"nerdpack-schema",$schema:"http://json-schema.org/draft-07/schema#",description:"Nerdpack Schema version 3",type:"object",properties:{id:{$ref:"nerdpack-id"},schemaType:{description:"Informs what kind of schema are we defining.",type:"string"},displayName:{description:"The name of the Nerdpack in a human-readable format.",type:"string"},description:{description:"The description of the Nerdpack.",type:"string"},repositoryUrl:{description:"The URL of the repository containing this Nerdpack.",type:"string"},teamStoreId:{description:"The Team Store id of the owner team. https://team-store.datanerd.us/",type:"string"},name:{$ref:"nerdpack-name"},sdkVersion:{description:"The version of the SDK that this Nerdpack is consuming.",type:"number",enum:[1,2,3]},excludeExternals:{description:"Exclude dependencies from being injected by NR1 and use the ones installed by the Nerdpack.",type:"array",items:{type:"string"}}},additionalProperties:!1,required:["id","name","schemaType","sdkVersion","displayName","description"]}},function(e){e.exports={$id:"focus-panel-schema",$schema:"http://json-schema.org/draft-07/schema#",description:"Focus Panel Schema",type:"object",properties:{id:{description:"Inherited from common artifact schema",type:"string"},deprecatedIds:{description:"Inherited from common artifact schema",type:"array"},schemaType:{description:"Inherited from common artifact schema",type:"string"},displayName:{description:"Inherited from common artifact schema",type:"string"},description:{description:"Inherited from common artifact schema",type:"string"},tessen:{description:"The tessen configuration for this artifact.",type:"object",properties:{product:{description:"Three or four letter identifier of the product line (e.g. PLTF for Platform Accounts).",type:"string"},subproduct:{description:"Three or four letter identifier of the sub-product line (e.g. DASH for Custom Dashboards).",type:"string"}}}},additionalProperties:!1}},function(e){e.exports={$id:"shared-component-package-schema",$schema:"http://json-schema.org/draft-07/schema#",description:"Container package for shared components",type:"object",properties:{id:{$ref:"nerdpack-id"},schemaType:{description:"Informs what kind of schema are we defining.",type:"string"},displayName:{description:"The name of the package in a human-readable format.",type:"string"},description:{description:"The description of the package.",type:"string"},repositoryUrl:{description:"The URL of the repository containing this package.",type:"string"},teamStoreId:{description:"The Team Store id of the owner team. https://team-store.datanerd.us/",type:"string"}},additionalProperties:!1,required:["id","schemaType","displayName","description"]}},function(e){e.exports={$id:"shared-component-schema",$schema:"http://json-schema.org/draft-07/schema#",description:"shared component Schema",type:"object",properties:{id:{description:"Inherited from common artifact schema",type:"string"},deprecatedIds:{description:"Inherited from common artifact schema",type:"array"},schemaType:{description:"Inherited from common artifact schema",type:"string"},displayName:{description:"Inherited from common artifact schema",type:"string"},description:{description:"Inherited from common artifact schema",type:"string"}},additionalProperties:!1}}]);